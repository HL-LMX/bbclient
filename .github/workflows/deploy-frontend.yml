name: Deploy BookingBite Frontend

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: bookingbite-frontend-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, windows, iis, bookingbite, frontend]
    timeout-minutes: 30
    env:
      HTTPS_PROXY: http://proxy.hlag.com:11009
      HTTP_PROXY: http://proxy.hlag.com:11009
      NO_PROXY: 127.0.0.1,localhost,*.hlag.com
      NODE_EXTRA_CA_CERTS: C:\certs\hlag-zscaler-root.pem
      REQUESTS_CA_BUNDLE: C:\certs\hlag-zscaler-root.pem
      SSL_CERT_FILE: C:\certs\hlag-zscaler-root.pem
    defaults:
      run:
        shell: powershell

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use Node 18 (CRA 5 is happiest here) and cache npm's package cache
      - name: Setup Node.js (v18) with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      # Make npm trust the corporate proxy and CA
      - name: Write project .npmrc (proxy + CA)
        run: |
          @"
          proxy=$env:HTTPS_PROXY
          https-proxy=$env:HTTPS_PROXY
          strict-ssl=true
          cafile=C:\certs\hlag-zscaler-root.pem
          registry=https://registry.npmjs.org/
          "@ | Out-File -FilePath "$env:GITHUB_WORKSPACE\.npmrc" -Encoding ascii

      # Cache node_modules keyed by package-lock.json (huge speedup on subsequent runs)
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      # Fast install (uses cache when possible). If no lockfile, falls back to npm install.
      - name: Install dependencies (fast, cached)
        run: |
          if (Test-Path package-lock.json) {
            npm ci --prefer-offline --no-audit --no-fund
          } else {
            npm install --include=dev --prefer-offline --no-audit --no-fund --legacy-peer-deps
          }

      - name: Save node_modules cache
        if: always()
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      # Build with API base wired for IIS proxying
      - name: Build React app
        run: |
          $env:CI = "true"
          $env:REACT_APP_API_URL = "/api/"
          npm run build
          if (!(Test-Path "$env:GITHUB_WORKSPACE\build\index.html")) {
            throw "Build failed: build\index.html not found"
          }

      - name: Deploy to IIS site root
        run: |
          C:\deployments\scripts\deploy-frontend.ps1 -BuildDir "$env:GITHUB_WORKSPACE\build"
